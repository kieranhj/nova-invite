NOVA 2020 Invitro
~~~~~~~~~~~~~~~~~

Something inspired by KAOS or COMA demos, i.e. 90's Amiga acid: N-O-V-A NOVA!
Rely heavily on awesome music from Rhino and keep tech simple, lots of sync to the beat
Would have to complete in 4 weeks, so by 16 May to be useful to release

Assuming Rhino is happy to compose a tune then need to decide whether to use software bass or not
=> this determines how sophisticated the tech could / should be

Then need to decide whether to do any rupture or scanline effects or just keep it simple.

Drive everything from the music player, trigger FX on frames, beats and patterns.
Run the music player in vsync and always tick the scripting engine for fn calls and/or common settings per frame.
Could have many of the changes be fairly random as long as it was sync'd to the music.

An acid track needs to be able to switch between simple effects instantly, typically:
- b&w static
- monochrome logos / icons / images in garish colours
- large full screen vu-bars / meters
- short looping animations timed to the beat
- simple animated lines or trippy effects
- ideally be able to do 1x1 2x2 4x4 type split screens
- lots of colour cycling

Assumptions:
- Master / plenty of SWRAM
- Store lots of 1bpp bitmaps in SWRAM using Exo
- Keep Fx code simple to reduce CPU overhead
- Decompress next bitmap into second buffer
- Use 32 column MODE 4 / MODE 5 = 8K screens? => could then afford up to 3x of them in main RAM. (&2000, &4000, &6000)
- Run decompress in 'main thread' on request

Questions:
- Software bass, if so how many channels? Just one?
- Does a draw routine need to be driven from stable raster or would a regular IRQ be sufficient? E.g. one every N rows
- How to do animations without rupture? Maybe compromise and have a draw fn called 4x per frame, start of every 8 rows, then row 32 for audio driver?
- Could use MODE 8 for colour cycling?
- How to schedule decompression without always having to specify it manually?
  => have a readahead pointer that searches for the next FX

Effects:
- Static => have an Y rows of random noise then randomise offset into this per N rows each frame
- Vu bars => could use rupture to select a row of graphics at appropriate width
          => or have a screen with vu-bars and just set CRTC horizontal displayed at key points in the frame
- Animations => use smaller screens either 1/2 or 1/4 size or rupture.

Organise as an FX Tracker
- Pattern of FX that lasts the same length as a pattern of music
- Can then have a sequence of FX patterns, so repeated, some matching specific music patterns
- Might be simpler to have pattern properties
    - E.g. MODE 4 pattern or MODE 5 pattern
- Set FX on the beat
  Q. do we need to set FX on lines?
- Each FX has:
    - a preload fn which is run on main thread
    - a make fn when set (or just put this after preload?)
    - a draw fn called N times per frame
    - a tick fn called once per frame (or use last draw callback?)
    - a kill fn when destroyed? (if required)
- Potentially have a separate palette controller set per FX pattern?

Example of Outro tune.
Playback @ 50Hz, Speed = 4 => one tracker line every 4 frames
Pattern length = 128 => one pattern is 128*4 = 512 frames = 10.24s
Bass drum on 0, 12, 16+0, 16+12, 32+0, etc.
Snare on 8, 16+8, 32+8 etc.
So pattern is divided into 128/16=8 parts

Will need to watch out for CPU spikes on beat or even tracker lines - need to spread out load.

Use simple palette cycling effects as much as possible?
MODE2 => MODE 8S
FORR%=1TO31:F%=&3000+R%*640:T%=&3000+R%*256:FORI%=0TO255:T%?I%=F%?I%:NEXT:NEXT
?&248=&E0:?&FE00=0:?&FE01=63:?&FE00=1:?&FE01=32:?&FE00=2:?&FE01=49:?&FE00=3:?&FE01=&24

Borrow from BBC Micro Bot as a starter:
Galaxy
https://twitter.com/P_Malin/status/1248232507306319872?s=20
1$@%="04137":MO.2:Q=1.5:F.E=12TO31:R=E*E/3:T=R/99:s=SIN(T):c=COS(T):N=1+INT(R/5):A=PI*2/N:S=SIN(A):C=COS(A):X=0:Y=R:I=RND
2F.L=0TON:I=I+1A.7:GC.0,8+I:PL.5+(L=0),256+X*c*Q/2-Y*s,512+X*s*Q+Y*c:x=X*C-Y*S:Y=X*S+Y*C:X=x:N.,
3FOR R%=1 TO 31:F%=&3000+R%*640:T%=&3000+R%*256:FORI%=0TO255:T%?I%=F%?I%:NEXT:NEXT
4?&248=&E0:?&FE00=0:?&FE01=63:?&FE00=1:?&FE01=32:?&FE00=2:?&FE01=49:?&FE00=3:?&FE01=&24
5F.C=0TO4:V.5,19,8+(I+C A.7),@%?C-48;0;:N.:I=I+1:G.5

Green cross
https://twitter.com/clysel/status/1247992387089182721?s=20
0 MODE2:PLOT 0,256,440
1 FOR A=0 TO 2*PI STEP 0.03:X=COS(A)*3:Y=SIN(A)*3
2 GCOL 0,(10*A MOD 31)+1
3 PLOT 1,X/2,Y:PLOT 1,X*160/2,Y*160
4 PLOT 1,Y*40/2,X*40:PLOT 1,X*-160/2,Y*-160
5 PLOT 1,Y*-40/2,X*-40
6 NEXT A
7 FORR%=1TO31:F%=&3000+R%*640:T%=&3000+R%*256:FORI%=0TO255:T%?I%=F%?I%:NEXT:NEXT
8 ?&248=&E0:?&FE00=0:?&FE01=63:?&FE00=1:?&FE01=32:?&FE00=2:?&FE01=49:?&FE00=3:?&FE01=&24
9 V.19,A,0,0,0,0:A=(A MOD 15)+1:V.19,A,2,0,0,0:I=INKEY(10):GOTO 9

Atom
https://twitter.com/P_Malin/status/1248323050782765056?s=20
1MO.2:V.5:G=30:F.J=0TO5:X=0:Y=450+J*30:U=33:V=0:IF J=0 Y=50:U=-20
2F.I=0TO110+(J=0)*50:R=G/SQR(X*X+Y*Y):U=U-X*R:V=V-Y*R:X=X+U:Y=Y+V:GC.0,1+((9+I-J*4)MOD15):PL.5+(I<2),256+X/2,512+Y:N.,:$@%="04467"
3 FORR%=1TO31:F%=&3000+R%*640:T%=&3000+R%*256:FORI%=0TO255:T%?I%=F%?I%:NEXT:NEXT
4 ?&248=&E0:?&FE00=0:?&FE01=63:?&FE00=1:?&FE01=32:?&FE00=2:?&FE01=49:?&FE00=3:?&FE01=&24
5F.C=0TO4:V.5,19,1+((I+C)MOD 15),@%?C-48;0;:N.:I=I+1:G.5

World
https://twitter.com/P_Malin/status/1252683291393773569?s=20
1MO.2:V.5:DIMS(64):F.C=0TO64:S(C)=SIN(C*.098):N.:F.I=0TO26:H=(1-I/26)*(1-2*(I MOD2)):W=50*SQR(1-H*H):GC.1,0:F.J%=0TO32:Z=999/(S(J%)*-W+110):DR.256+S(J%+16)*W*Z/2,512+H*50*Z:GC.0,1+(C+W*9)MOD15:C=C+1:N.,
2 FORR%=1TO31:F%=&3000+R%*640:T%=&3000+R%*256:FORI%=0TO255:T%?I%=F%?I%:NEXT:NEXT
3 ?&248=&E0:?&FE00=0:?&FE01=63:?&FE00=1:?&FE01=32:?&FE00=2:?&FE01=49:?&FE00=3:?&FE01=&24
4$@%="0426":F.I=0TO1E6:F.J=0TO3:V.19,(I+J)MOD15+1,@%?J-48;0;:N.,


Sequencing
~~~

FX Pattern has same length as music pattern, updates at same rate.
Could use a Python script to parse (or spreadsheet?) but for now use MACROs.
Keep it simple, what do you actually need to support the known FX?
Use asset identifiers, otherwise will go mad with 30x assets

asset_pic2_n
asset_pic2_nova
asset_pic2_nova4
asset_anim16_cross
etc.

Examples of things we want to be able to do:
- on beat X show 2bpp picture 'nova4' on screen 0
- set colour A to C
- set colour 1 to be random every beat
- show cycled animation 'green_cross'
- show static noise
- call this fn every line (for ?)
- call this fn every beat (for palette change)
- call this fn every frame (for colour cycling)
- show screen N
- load asset to screen M (bg fn)
- create static noise on screen N (bg fn)

Track speed = 3
Pattern length = 128
Beat every 8 lines = 24 vsyncs = 16 beats per pattern
Pattern time = 384 vsyncs = 7.68s
Most assets should be able to load within a beat.

BEGIN_PATTERN 1
LINE 1  ; EQUB 01
BEAT 1  SHOW_PIC2   asset_pic2_n, 0
        SET_COL     1, PAL_cyan
BEAT 2  ;   (just expanded to LINE 2*8)
        SHOW_ANIM16 asset_anim16_cross
BEAT 3  SET_BEAT_FN cycle_fg_on_beat
BEAT 4  
LINE 21
END_PATTERN     ; EQUB 128 (just > pattern length)

SHOW_PIC2 asset_id, screen_no       ; is actually:
    LOAD_ASSET      asset_id, screen_no  ; (8 lines prior)
    SHOW_2SCREEN    screen_no            ; sets ULA to 2bpp

Assets need to be preloaded ~24 frames ahead of use
Options:
    - manually specify this in script
    - parse the script 24 frames ahead at runtime
    - parse the script offline and insert the load commands
    - compile the script twice, keeping a separate list of asset requests
=> challenge in that you need to preload before parsing the next pattern if
   you want to have a new FX on the first line...
Do it manually first, then automate later.

16 colours for animation conversion:
[0] = {0, 0, 0}
[1] = {255, 0, 255}
[2] = {0, 255, 0}
[3] = {255, 255, 0}
[4] = {0, 0, 255}
[5] = {255, 0, 255}
[6] = {0, 255, 255}
[7] = {255, 255, 255}

[8] = {64, 64, 64}
[9] = {127, 0, 0}
[10] = {0, 127, 0}
[11] = {127, 127, 0}
[12] = {0, 0, 127}
[13] = {127, 0, 127}
[14] = {0, 127, 127}
[15] = {127, 127, 127}

On reflection, I hate the idea of sequencing by text file.
For Patarty this was slow and painful and error prone.
Use the Arkos Tracker 2 events line!
Format is simple:
<word> number of lines to wait + 1 (so 1 = immediate)
<byte> event number

From the users POV only commands are:
- Image / animation off
- Animation / static number
- Colour
- Special FX

Perhaps encode &xy; where x:
    0y = control codes
    1y = image #
    2y = animation #
    3y = set fg colour #
    4y = special Fx #

Let's just say y is the asset number for now.
Can worry about randomisation or lists later.
Might need to think about how to do multiple things on same line,
e.g. show image in a specific colour.
=> Can always bake a default colour in with the image.
=> Or have a command that sets image colour not immediate colour

Control codes can be things like, hide screen, show prev buffer, etc.

In terms of preloading, keep things simple.
When getting the delay value, call the preload fn for that event type,
passing in the event data.

TODO
~~~
- Wrap to 8K?
- Alternate display & next and keep third buffer for special?
- Static noise task - & time
- Quarter screen task - & time
- Debug info! - DONE
- Workflow for iteration - hostfs / TubeLink on b2?
  => b2 will do direct disk access, so update the ssd and can reload the file
- Sort out SWRAM use
- Use Makefile?
- Make colour cycling fns. generic & add speed plus colour, and ping-pong / loop
- Debug controls
    - Pause / play
    - Step frame, step line, step to end of pattern
    - (Eventually, reload events)
